// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(nostr_sdkFFI)
import nostr_sdkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_nostr_sdk_ffi_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_nostr_sdk_ffi_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2
fileprivate let CALL_CANCELLED: Int8 = 3

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: nil)
}

private func rustCallWithError<T>(
    _ errorHandler: @escaping (RustBuffer) throws -> Error,
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: errorHandler)
}

private func makeRustCall<T>(
    _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws -> T {
    uniffiEnsureInitialized()
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    try uniffiCheckCallStatus(callStatus: callStatus, errorHandler: errorHandler)
    return returnedVal
}

private func uniffiCheckCallStatus(
    callStatus: RustCallStatus,
    errorHandler: ((RustBuffer) throws -> Error)?
) throws {
    switch callStatus.code {
        case CALL_SUCCESS:
            return

        case CALL_ERROR:
            if let errorHandler = errorHandler {
                throw try errorHandler(callStatus.errorBuf)
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.unexpectedRustCallError
            }

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        case CALL_CANCELLED:
            fatalError("Cancellation not supported yet")

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterDouble: FfiConverterPrimitive {
    typealias FfiType = Double
    typealias SwiftType = Double

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Double {
        return try lift(readDouble(&buf))
    }

    public static func write(_ value: Double, into buf: inout [UInt8]) {
        writeDouble(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}




public protocol ActiveSubscriptionProtocol : AnyObject {
    
    func filters()  -> [Filter]
    
    func id()  -> String
    
}
public class ActiveSubscription:
    ActiveSubscriptionProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_activesubscription(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_activesubscription(pointer, $0) }
    }

    

    
    
    public func filters()  -> [Filter] {
        return try!  FfiConverterSequenceTypeFilter.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_activesubscription_filters(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func id()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_activesubscription_id(self.uniffiClonePointer(), $0
    )
}
        )
    }

}

public struct FfiConverterTypeActiveSubscription: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ActiveSubscription

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ActiveSubscription {
        return ActiveSubscription(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ActiveSubscription) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ActiveSubscription {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ActiveSubscription, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeActiveSubscription_lift(_ pointer: UnsafeMutableRawPointer) throws -> ActiveSubscription {
    return try FfiConverterTypeActiveSubscription.lift(pointer)
}

public func FfiConverterTypeActiveSubscription_lower(_ value: ActiveSubscription) -> UnsafeMutableRawPointer {
    return FfiConverterTypeActiveSubscription.lower(value)
}




public protocol ClientProtocol : AnyObject {
    
    func addRelay(url: String) throws  -> Bool
    
    func connect() 
    
    func connectRelay(url: String) throws 
    
    func database()  -> NostrDatabase
    
    func disconnect() throws 
    
    func disconnectRelay(url: String) throws 
    
    func fileMetadata(description: String, metadata: FileMetadata) throws  -> EventId
    
    func getEventsOf(filters: [Filter], timeout: TimeInterval?) throws  -> [Event]
    
    func handleNotifications(handler: HandleNotification) 
    
    func isRunning()  -> Bool
    
    func keys()  -> Keys
    
    func reconcile(filter: Filter) throws 
    
    func relay(url: String) throws  -> Relay
    
    func relays()  -> [String: Relay]
    
    func removeRelay(url: String) throws 
    
    func reqEventsOf(filters: [Filter], timeout: TimeInterval?) 
    
    func sendDirectMsg(receiver: PublicKey, msg: String, reply: EventId?) throws  -> EventId
    
    func sendEvent(event: Event) throws  -> EventId
    
    func sendEventTo(url: String, event: Event) throws  -> EventId
    
    func sendMsg(msg: ClientMessage) throws 
    
    func sendMsgTo(url: String, msg: ClientMessage) throws 
    
    func setMetadata(metadata: Metadata) throws  -> EventId
    
    func shutdown() throws 
    
    func start() 
    
    func stop() throws 
    
    func subscribe(filters: [Filter]) 
    
    func unsubscribe() 
    
    func updateDifficulty(difficulty: UInt8) 
    
}
public class Client:
    ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_client(self.pointer, $0) }
    }
    public convenience init(keys: Keys)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_ffi_fn_constructor_client_new(
        FfiConverterTypeKeys_lower(keys),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_client(pointer, $0) }
    }

    
    public static func withOpts(keys: Keys, opts: Options)  -> Client {
        return Client(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_ffi_fn_constructor_client_with_opts(
        FfiConverterTypeKeys_lower(keys),
        FfiConverterTypeOptions.lower(opts),$0)
})
    }

    

    
    
    public func addRelay(url: String) throws  -> Bool {
        return try  FfiConverterBool.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_add_relay(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),$0
    )
}
        )
    }
    public func connect()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_connect(self.uniffiClonePointer(), $0
    )
}
    }
    public func connectRelay(url: String) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_connect_relay(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),$0
    )
}
    }
    public func database()  -> NostrDatabase {
        return try!  FfiConverterTypeNostrDatabase.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_database(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func disconnect() throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_disconnect(self.uniffiClonePointer(), $0
    )
}
    }
    public func disconnectRelay(url: String) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_disconnect_relay(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),$0
    )
}
    }
    public func fileMetadata(description: String, metadata: FileMetadata) throws  -> EventId {
        return try  FfiConverterTypeEventId_lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_file_metadata(self.uniffiClonePointer(), 
        FfiConverterString.lower(description),
        FfiConverterTypeFileMetadata_lower(metadata),$0
    )
}
        )
    }
    public func getEventsOf(filters: [Filter], timeout: TimeInterval?) throws  -> [Event] {
        return try  FfiConverterSequenceTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_get_events_of(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),
        FfiConverterOptionDuration.lower(timeout),$0
    )
}
        )
    }
    public func handleNotifications(handler: HandleNotification)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_handle_notifications(self.uniffiClonePointer(), 
        FfiConverterCallbackInterfaceHandleNotification.lower(handler),$0
    )
}
    }
    public func isRunning()  -> Bool {
        return try!  FfiConverterBool.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_is_running(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func keys()  -> Keys {
        return try!  FfiConverterTypeKeys_lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_keys(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func reconcile(filter: Filter) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_reconcile(self.uniffiClonePointer(), 
        FfiConverterTypeFilter_lower(filter),$0
    )
}
    }
    public func relay(url: String) throws  -> Relay {
        return try  FfiConverterTypeRelay.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_relay(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),$0
    )
}
        )
    }
    public func relays()  -> [String: Relay] {
        return try!  FfiConverterDictionaryStringTypeRelay.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_relays(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func removeRelay(url: String) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_remove_relay(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),$0
    )
}
    }
    public func reqEventsOf(filters: [Filter], timeout: TimeInterval?)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_req_events_of(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),
        FfiConverterOptionDuration.lower(timeout),$0
    )
}
    }
    public func sendDirectMsg(receiver: PublicKey, msg: String, reply: EventId?) throws  -> EventId {
        return try  FfiConverterTypeEventId_lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_send_direct_msg(self.uniffiClonePointer(), 
        FfiConverterTypePublicKey_lower(receiver),
        FfiConverterString.lower(msg),
        FfiConverterOptionTypeEventId.lower(reply),$0
    )
}
        )
    }
    public func sendEvent(event: Event) throws  -> EventId {
        return try  FfiConverterTypeEventId_lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_send_event(self.uniffiClonePointer(), 
        FfiConverterTypeEvent_lower(event),$0
    )
}
        )
    }
    public func sendEventTo(url: String, event: Event) throws  -> EventId {
        return try  FfiConverterTypeEventId_lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_send_event_to(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),
        FfiConverterTypeEvent_lower(event),$0
    )
}
        )
    }
    public func sendMsg(msg: ClientMessage) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_send_msg(self.uniffiClonePointer(), 
        FfiConverterTypeClientMessage_lower(msg),$0
    )
}
    }
    public func sendMsgTo(url: String, msg: ClientMessage) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_send_msg_to(self.uniffiClonePointer(), 
        FfiConverterString.lower(url),
        FfiConverterTypeClientMessage_lower(msg),$0
    )
}
    }
    public func setMetadata(metadata: Metadata) throws  -> EventId {
        return try  FfiConverterTypeEventId_lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_set_metadata(self.uniffiClonePointer(), 
        FfiConverterTypeMetadata_lower(metadata),$0
    )
}
        )
    }
    public func shutdown() throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_shutdown(self.uniffiClonePointer(), $0
    )
}
    }
    public func start()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_start(self.uniffiClonePointer(), $0
    )
}
    }
    public func stop() throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_client_stop(self.uniffiClonePointer(), $0
    )
}
    }
    public func subscribe(filters: [Filter])  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_subscribe(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),$0
    )
}
    }
    public func unsubscribe()  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_unsubscribe(self.uniffiClonePointer(), $0
    )
}
    }
    public func updateDifficulty(difficulty: UInt8)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_client_update_difficulty(self.uniffiClonePointer(), 
        FfiConverterUInt8.lower(difficulty),$0
    )
}
    }

}

public struct FfiConverterTypeClient: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeClient_lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
    return try FfiConverterTypeClient.lift(pointer)
}

public func FfiConverterTypeClient_lower(_ value: Client) -> UnsafeMutableRawPointer {
    return FfiConverterTypeClient.lower(value)
}




public protocol ClientBuilderProtocol : AnyObject {
    
    /**
     * Build [`Client`]
     */
    func build()  -> Client
    
    func database(database: NostrDatabase)  -> ClientBuilder
    
    /**
     * Set opts
     */
    func opts(opts: Options)  -> ClientBuilder
    
}
public class ClientBuilder:
    ClientBuilderProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_clientbuilder(self.pointer, $0) }
    }
    /**
     * New client builder
     */
    public convenience init(keys: Keys)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_ffi_fn_constructor_clientbuilder_new(
        FfiConverterTypeKeys_lower(keys),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_clientbuilder(pointer, $0) }
    }

    

    
    
    /**
     * Build [`Client`]
     */
    public func build()  -> Client {
        return try!  FfiConverterTypeClient.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_clientbuilder_build(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func database(database: NostrDatabase)  -> ClientBuilder {
        return try!  FfiConverterTypeClientBuilder.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_clientbuilder_database(self.uniffiClonePointer(), 
        FfiConverterTypeNostrDatabase.lower(database),$0
    )
}
        )
    }
    /**
     * Set opts
     */
    public func opts(opts: Options)  -> ClientBuilder {
        return try!  FfiConverterTypeClientBuilder.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_clientbuilder_opts(self.uniffiClonePointer(), 
        FfiConverterTypeOptions.lower(opts),$0
    )
}
        )
    }

}

public struct FfiConverterTypeClientBuilder: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = ClientBuilder

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> ClientBuilder {
        return ClientBuilder(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: ClientBuilder) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientBuilder {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: ClientBuilder, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeClientBuilder_lift(_ pointer: UnsafeMutableRawPointer) throws -> ClientBuilder {
    return try FfiConverterTypeClientBuilder.lift(pointer)
}

public func FfiConverterTypeClientBuilder_lower(_ value: ClientBuilder) -> UnsafeMutableRawPointer {
    return FfiConverterTypeClientBuilder.lower(value)
}




public protocol NostrDatabaseProtocol : AnyObject {
    
    func count(filters: [Filter]) throws  -> UInt64
    
    /**
     * Get [`Event`] by [`EventId`]
     */
    func eventById(eventId: EventId) throws  -> Event
    
    /**
     * Get list of relays that have seen the [`EventId`]
     */
    func eventSeenOnRelays(eventId: EventId) throws  -> [String]?
    
    func profile(publicKey: PublicKey) throws  -> Profile
    
    func query(filters: [Filter]) throws  -> [Event]
    
    /**
     * Save [`Event`] into store
     *
     * Return `true` if event was successfully saved into database.
     */
    func saveEvent(event: Event) throws  -> Bool
    
    /**
     * Wipe all data
     */
    func wipe() throws 
    
}
public class NostrDatabase:
    NostrDatabaseProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_nostrdatabase(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_nostrdatabase(pointer, $0) }
    }

    
    public static func sqlite(path: String) throws  -> NostrDatabase {
        return NostrDatabase(unsafeFromRawPointer: try rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_constructor_nostrdatabase_sqlite(
        FfiConverterString.lower(path),$0)
})
    }

    

    
    
    public func count(filters: [Filter]) throws  -> UInt64 {
        return try  FfiConverterUInt64.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_count(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),$0
    )
}
        )
    }
    /**
     * Get [`Event`] by [`EventId`]
     */
    public func eventById(eventId: EventId) throws  -> Event {
        return try  FfiConverterTypeEvent_lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_by_id(self.uniffiClonePointer(), 
        FfiConverterTypeEventId_lower(eventId),$0
    )
}
        )
    }
    /**
     * Get list of relays that have seen the [`EventId`]
     */
    public func eventSeenOnRelays(eventId: EventId) throws  -> [String]? {
        return try  FfiConverterOptionSequenceString.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_event_seen_on_relays(self.uniffiClonePointer(), 
        FfiConverterTypeEventId_lower(eventId),$0
    )
}
        )
    }
    public func profile(publicKey: PublicKey) throws  -> Profile {
        return try  FfiConverterTypeProfile.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_profile(self.uniffiClonePointer(), 
        FfiConverterTypePublicKey_lower(publicKey),$0
    )
}
        )
    }
    public func query(filters: [Filter]) throws  -> [Event] {
        return try  FfiConverterSequenceTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_query(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),$0
    )
}
        )
    }
    /**
     * Save [`Event`] into store
     *
     * Return `true` if event was successfully saved into database.
     */
    public func saveEvent(event: Event) throws  -> Bool {
        return try  FfiConverterBool.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_save_event(self.uniffiClonePointer(), 
        FfiConverterTypeEvent_lower(event),$0
    )
}
        )
    }
    /**
     * Wipe all data
     */
    public func wipe() throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_nostrdatabase_wipe(self.uniffiClonePointer(), $0
    )
}
    }

}

public struct FfiConverterTypeNostrDatabase: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = NostrDatabase

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> NostrDatabase {
        return NostrDatabase(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: NostrDatabase) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrDatabase {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: NostrDatabase, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeNostrDatabase_lift(_ pointer: UnsafeMutableRawPointer) throws -> NostrDatabase {
    return try FfiConverterTypeNostrDatabase.lift(pointer)
}

public func FfiConverterTypeNostrDatabase_lower(_ value: NostrDatabase) -> UnsafeMutableRawPointer {
    return FfiConverterTypeNostrDatabase.lower(value)
}




public protocol OptionsProtocol : AnyObject {
    
    func difficulty(difficulty: UInt8)  -> Options
    
    func nip46Timeout(nip46Timeout: TimeInterval?)  -> Options
    
    func reqFiltersChunkSize(reqFiltersChunkSize: UInt8)  -> Options
    
    func sendTimeout(sendTimeout: TimeInterval?)  -> Options
    
    func skipDisconnectedRelays(skip: Bool)  -> Options
    
    func timeout(timeout: TimeInterval)  -> Options
    
    func waitForConnection(wait: Bool)  -> Options
    
    func waitForSend(wait: Bool)  -> Options
    
    func waitForSubscription(wait: Bool)  -> Options
    
}
public class Options:
    OptionsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_options(self.pointer, $0) }
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_ffi_fn_constructor_options_new($0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_options(pointer, $0) }
    }

    

    
    
    public func difficulty(difficulty: UInt8)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_difficulty(self.uniffiClonePointer(), 
        FfiConverterUInt8.lower(difficulty),$0
    )
}
        )
    }
    public func nip46Timeout(nip46Timeout: TimeInterval?)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_nip46_timeout(self.uniffiClonePointer(), 
        FfiConverterOptionDuration.lower(nip46Timeout),$0
    )
}
        )
    }
    public func reqFiltersChunkSize(reqFiltersChunkSize: UInt8)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_req_filters_chunk_size(self.uniffiClonePointer(), 
        FfiConverterUInt8.lower(reqFiltersChunkSize),$0
    )
}
        )
    }
    public func sendTimeout(sendTimeout: TimeInterval?)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_send_timeout(self.uniffiClonePointer(), 
        FfiConverterOptionDuration.lower(sendTimeout),$0
    )
}
        )
    }
    public func skipDisconnectedRelays(skip: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_skip_disconnected_relays(self.uniffiClonePointer(), 
        FfiConverterBool.lower(skip),$0
    )
}
        )
    }
    public func timeout(timeout: TimeInterval)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_timeout(self.uniffiClonePointer(), 
        FfiConverterDuration.lower(timeout),$0
    )
}
        )
    }
    public func waitForConnection(wait: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_wait_for_connection(self.uniffiClonePointer(), 
        FfiConverterBool.lower(wait),$0
    )
}
        )
    }
    public func waitForSend(wait: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_wait_for_send(self.uniffiClonePointer(), 
        FfiConverterBool.lower(wait),$0
    )
}
        )
    }
    public func waitForSubscription(wait: Bool)  -> Options {
        return try!  FfiConverterTypeOptions.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_options_wait_for_subscription(self.uniffiClonePointer(), 
        FfiConverterBool.lower(wait),$0
    )
}
        )
    }

}

public struct FfiConverterTypeOptions: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Options

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Options {
        return Options(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Options) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Options {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Options, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeOptions_lift(_ pointer: UnsafeMutableRawPointer) throws -> Options {
    return try FfiConverterTypeOptions.lift(pointer)
}

public func FfiConverterTypeOptions_lower(_ value: Options) -> UnsafeMutableRawPointer {
    return FfiConverterTypeOptions.lower(value)
}




public protocol ProfileProtocol : AnyObject {
    
    /**
     * Get profile metadata
     */
    func metadata()  -> Metadata
    
    /**
     * Get profile name
     *
     * Steps (go to next step if field is `None` or `empty`):
     * * Check `display_name` field
     * * Check `name` field
     * * Return cutted public key (ex. `00000000:00000002`)
     */
    func name()  -> String
    
    /**
     * Get profile public key
     */
    func publicKey()  -> PublicKey
    
}
public class Profile:
    ProfileProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_profile(self.pointer, $0) }
    }
    /**
     * Compose new profile
     */
    public convenience init(publicKey: PublicKey, metadata: Metadata)  {
        self.init(unsafeFromRawPointer: try! rustCall() {
    uniffi_nostr_sdk_ffi_fn_constructor_profile_new(
        FfiConverterTypePublicKey_lower(publicKey),
        FfiConverterTypeMetadata_lower(metadata),$0)
})
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_profile(pointer, $0) }
    }

    

    
    
    /**
     * Get profile metadata
     */
    public func metadata()  -> Metadata {
        return try!  FfiConverterTypeMetadata_lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_profile_metadata(self.uniffiClonePointer(), $0
    )
}
        )
    }
    /**
     * Get profile name
     *
     * Steps (go to next step if field is `None` or `empty`):
     * * Check `display_name` field
     * * Check `name` field
     * * Return cutted public key (ex. `00000000:00000002`)
     */
    public func name()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_profile_name(self.uniffiClonePointer(), $0
    )
}
        )
    }
    /**
     * Get profile public key
     */
    public func publicKey()  -> PublicKey {
        return try!  FfiConverterTypePublicKey_lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_profile_public_key(self.uniffiClonePointer(), $0
    )
}
        )
    }

}

public struct FfiConverterTypeProfile: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Profile

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Profile {
        return Profile(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Profile) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Profile {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Profile, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeProfile_lift(_ pointer: UnsafeMutableRawPointer) throws -> Profile {
    return try FfiConverterTypeProfile.lift(pointer)
}

public func FfiConverterTypeProfile_lower(_ value: Profile) -> UnsafeMutableRawPointer {
    return FfiConverterTypeProfile.lower(value)
}




public protocol RelayProtocol : AnyObject {
    
    func connect(waitForConnection: Bool) 
    
    func document()  -> RelayInformationDocument
    
    func getEventsOf(filters: [Filter], timeout: TimeInterval) throws  -> [Event]
    
    func isConnected()  -> Bool
    
    func proxy()  -> String?
    
    func queue()  -> UInt64
    
    func reqEventsOf(filters: [Filter], timeout: TimeInterval) 
    
    func sendMsg(msg: ClientMessage, wait: TimeInterval?) throws 
    
    func stats()  -> RelayConnectionStats
    
    func status()  -> RelayStatus
    
    func stop() throws 
    
    func subscribe(filters: [Filter], wait: TimeInterval?) throws 
    
    func subscriptions()  -> [String: ActiveSubscription]
    
    func terminate() throws 
    
    func unsubscribe(wait: TimeInterval?) throws 
    
    func url()  -> String
    
}
public class Relay:
    RelayProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_relay(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_relay(pointer, $0) }
    }

    

    
    
    public func connect(waitForConnection: Bool)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_connect(self.uniffiClonePointer(), 
        FfiConverterBool.lower(waitForConnection),$0
    )
}
    }
    public func document()  -> RelayInformationDocument {
        return try!  FfiConverterTypeRelayInformationDocument_lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_document(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func getEventsOf(filters: [Filter], timeout: TimeInterval) throws  -> [Event] {
        return try  FfiConverterSequenceTypeEvent.lift(
            try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_relay_get_events_of(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),
        FfiConverterDuration.lower(timeout),$0
    )
}
        )
    }
    public func isConnected()  -> Bool {
        return try!  FfiConverterBool.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_is_connected(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func proxy()  -> String? {
        return try!  FfiConverterOptionString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_proxy(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func queue()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_queue(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func reqEventsOf(filters: [Filter], timeout: TimeInterval)  {
        try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_req_events_of(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),
        FfiConverterDuration.lower(timeout),$0
    )
}
    }
    public func sendMsg(msg: ClientMessage, wait: TimeInterval?) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_relay_send_msg(self.uniffiClonePointer(), 
        FfiConverterTypeClientMessage_lower(msg),
        FfiConverterOptionDuration.lower(wait),$0
    )
}
    }
    public func stats()  -> RelayConnectionStats {
        return try!  FfiConverterTypeRelayConnectionStats.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_stats(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func status()  -> RelayStatus {
        return try!  FfiConverterTypeRelayStatus.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_status(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func stop() throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_relay_stop(self.uniffiClonePointer(), $0
    )
}
    }
    public func subscribe(filters: [Filter], wait: TimeInterval?) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_relay_subscribe(self.uniffiClonePointer(), 
        FfiConverterSequenceTypeFilter.lower(filters),
        FfiConverterOptionDuration.lower(wait),$0
    )
}
    }
    public func subscriptions()  -> [String: ActiveSubscription] {
        return try!  FfiConverterDictionaryStringTypeActiveSubscription.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_subscriptions(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func terminate() throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_relay_terminate(self.uniffiClonePointer(), $0
    )
}
    }
    public func unsubscribe(wait: TimeInterval?) throws  {
        try 
    rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_method_relay_unsubscribe(self.uniffiClonePointer(), 
        FfiConverterOptionDuration.lower(wait),$0
    )
}
    }
    public func url()  -> String {
        return try!  FfiConverterString.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relay_url(self.uniffiClonePointer(), $0
    )
}
        )
    }

}

public struct FfiConverterTypeRelay: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Relay

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Relay {
        return Relay(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Relay) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Relay {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Relay, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeRelay_lift(_ pointer: UnsafeMutableRawPointer) throws -> Relay {
    return try FfiConverterTypeRelay.lift(pointer)
}

public func FfiConverterTypeRelay_lower(_ value: Relay) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRelay.lower(value)
}




public protocol RelayConnectionStatsProtocol : AnyObject {
    
    func attempts()  -> UInt64
    
    func bytesReceived()  -> UInt64
    
    func bytesSent()  -> UInt64
    
    func connectedAt()  -> Timestamp
    
    func latency()  -> TimeInterval?
    
    func success()  -> UInt64
    
    func uptime()  -> Double
    
}
public class RelayConnectionStats:
    RelayConnectionStatsProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    public func uniffiClonePointer() -> UnsafeMutableRawPointer {
        return try! rustCall { uniffi_nostr_sdk_ffi_fn_clone_relayconnectionstats(self.pointer, $0) }
    }

    deinit {
        try! rustCall { uniffi_nostr_sdk_ffi_fn_free_relayconnectionstats(pointer, $0) }
    }

    

    
    
    public func attempts()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_attempts(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func bytesReceived()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_received(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func bytesSent()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_bytes_sent(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func connectedAt()  -> Timestamp {
        return try!  FfiConverterTypeTimestamp_lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_connected_at(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func latency()  -> TimeInterval? {
        return try!  FfiConverterOptionDuration.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_latency(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func success()  -> UInt64 {
        return try!  FfiConverterUInt64.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_success(self.uniffiClonePointer(), $0
    )
}
        )
    }
    public func uptime()  -> Double {
        return try!  FfiConverterDouble.lift(
            try! 
    rustCall() {
    
    uniffi_nostr_sdk_ffi_fn_method_relayconnectionstats_uptime(self.uniffiClonePointer(), $0
    )
}
        )
    }

}

public struct FfiConverterTypeRelayConnectionStats: FfiConverter {

    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = RelayConnectionStats

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> RelayConnectionStats {
        return RelayConnectionStats(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: RelayConnectionStats) -> UnsafeMutableRawPointer {
        return value.uniffiClonePointer()
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RelayConnectionStats {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: RelayConnectionStats, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }
}


public func FfiConverterTypeRelayConnectionStats_lift(_ pointer: UnsafeMutableRawPointer) throws -> RelayConnectionStats {
    return try FfiConverterTypeRelayConnectionStats.lift(pointer)
}

public func FfiConverterTypeRelayConnectionStats_lower(_ value: RelayConnectionStats) -> UnsafeMutableRawPointer {
    return FfiConverterTypeRelayConnectionStats.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum LogLevel {
    
    case error
    case warn
    case info
    case debug
    case trace
}

public struct FfiConverterTypeLogLevel: FfiConverterRustBuffer {
    typealias SwiftType = LogLevel

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> LogLevel {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .error
        
        case 2: return .warn
        
        case 3: return .info
        
        case 4: return .debug
        
        case 5: return .trace
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: LogLevel, into buf: inout [UInt8]) {
        switch value {
        
        
        case .error:
            writeInt(&buf, Int32(1))
        
        
        case .warn:
            writeInt(&buf, Int32(2))
        
        
        case .info:
            writeInt(&buf, Int32(3))
        
        
        case .debug:
            writeInt(&buf, Int32(4))
        
        
        case .trace:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeLogLevel_lift(_ buf: RustBuffer) throws -> LogLevel {
    return try FfiConverterTypeLogLevel.lift(buf)
}

public func FfiConverterTypeLogLevel_lower(_ value: LogLevel) -> RustBuffer {
    return FfiConverterTypeLogLevel.lower(value)
}


extension LogLevel: Equatable, Hashable {}




public enum NostrSdkError {

    
    
    case Generic(
        err: String
    )

    fileprivate static func uniffiErrorHandler(_ error: RustBuffer) throws -> Error {
        return try FfiConverterTypeNostrSdkError.lift(error)
    }
}


public struct FfiConverterTypeNostrSdkError: FfiConverterRustBuffer {
    typealias SwiftType = NostrSdkError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> NostrSdkError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            err: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: NostrSdkError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(err):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(err, into: &buf)
            
        }
    }
}


extension NostrSdkError: Equatable, Hashable {}

extension NostrSdkError: Error { }

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RelayStatus {
    
    /**
     * Relay initialized
     */
    case initialized
    /**
     * Pending
     */
    case pending
    /**
     * Connecting
     */
    case connecting
    /**
     * Relay connected
     */
    case connected
    /**
     * Relay disconnected, will retry to connect again
     */
    case disconnected
    /**
     * Stop
     */
    case stopped
    /**
     * Relay completely disconnected
     */
    case terminated
}

public struct FfiConverterTypeRelayStatus: FfiConverterRustBuffer {
    typealias SwiftType = RelayStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RelayStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .initialized
        
        case 2: return .pending
        
        case 3: return .connecting
        
        case 4: return .connected
        
        case 5: return .disconnected
        
        case 6: return .stopped
        
        case 7: return .terminated
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RelayStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .initialized:
            writeInt(&buf, Int32(1))
        
        
        case .pending:
            writeInt(&buf, Int32(2))
        
        
        case .connecting:
            writeInt(&buf, Int32(3))
        
        
        case .connected:
            writeInt(&buf, Int32(4))
        
        
        case .disconnected:
            writeInt(&buf, Int32(5))
        
        
        case .stopped:
            writeInt(&buf, Int32(6))
        
        
        case .terminated:
            writeInt(&buf, Int32(7))
        
        }
    }
}


public func FfiConverterTypeRelayStatus_lift(_ buf: RustBuffer) throws -> RelayStatus {
    return try FfiConverterTypeRelayStatus.lift(buf)
}

public func FfiConverterTypeRelayStatus_lower(_ value: RelayStatus) -> RustBuffer {
    return FfiConverterTypeRelayStatus.lower(value)
}


extension RelayStatus: Equatable, Hashable {}






public protocol HandleNotification : AnyObject {
    
    func handleMsg(relayUrl: String, msg: RelayMessage) 
    
    func handle(relayUrl: String, event: Event) 
    
}
fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 1
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0
// Callback return codes
private let UNIFFI_CALLBACK_SUCCESS: Int32 = 0
private let UNIFFI_CALLBACK_ERROR: Int32 = 1
private let UNIFFI_CALLBACK_UNEXPECTED_ERROR: Int32 = 2

// Declaration and FfiConverters for HandleNotification Callback Interface

fileprivate let uniffiCallbackHandlerHandleNotification : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, argsData: UnsafePointer<UInt8>, argsLen: Int32, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
    

    func invokeHandleMsg(_ swiftCallbackInterface: HandleNotification, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.handleMsg(
                    relayUrl:  try FfiConverterString.read(from: &reader), 
                    msg:  try FfiConverterTypeRelayMessage.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }

    func invokeHandle(_ swiftCallbackInterface: HandleNotification, _ argsData: UnsafePointer<UInt8>, _ argsLen: Int32, _ out_buf: UnsafeMutablePointer<RustBuffer>) throws -> Int32 {
        var reader = createReader(data: Data(bytes: argsData, count: Int(argsLen)))
        func makeCall() throws -> Int32 {
            swiftCallbackInterface.handle(
                    relayUrl:  try FfiConverterString.read(from: &reader), 
                    event:  try FfiConverterTypeEvent.read(from: &reader)
                    )
            return UNIFFI_CALLBACK_SUCCESS
        }
        return try makeCall()
    }


    switch method {
        case IDX_CALLBACK_FREE:
            FfiConverterCallbackInterfaceHandleNotification.handleMap.remove(handle: handle)
            // Sucessful return
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_SUCCESS
        case 1:
            guard let cb = FfiConverterCallbackInterfaceHandleNotification.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeHandleMsg(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        case 2:
            guard let cb = FfiConverterCallbackInterfaceHandleNotification.handleMap.get(handle: handle) else {
                out_buf.pointee = FfiConverterString.lower("No callback in handlemap; this is a Uniffi bug")
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
            do {
                return try invokeHandle(cb, argsData, argsLen, out_buf)
            } catch let error {
                out_buf.pointee = FfiConverterString.lower(String(describing: error))
                return UNIFFI_CALLBACK_UNEXPECTED_ERROR
            }
        
        // This should never happen, because an out of bounds method index won't
        // ever be used. Once we can catch errors, we should return an InternalError.
        // https://github.com/mozilla/uniffi-rs/issues/351
        default:
            // An unexpected error happened.
            // See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    }
}

private func uniffiCallbackInitHandleNotification() {
    uniffi_nostr_sdk_ffi_fn_init_callback_handlenotification(uniffiCallbackHandlerHandleNotification)
}

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceHandleNotification {
    fileprivate static var handleMap = UniFFICallbackHandleMap<HandleNotification>()
}

extension FfiConverterCallbackInterfaceHandleNotification : FfiConverter {
    typealias SwiftType = HandleNotification
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeEventId: FfiConverterRustBuffer {
    typealias SwiftType = EventId?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeEventId.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEventId.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeEvent: FfiConverterRustBuffer {
    typealias SwiftType = [Event]

    public static func write(_ value: [Event], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeEvent.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Event] {
        let len: Int32 = try readInt(&buf)
        var seq = [Event]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeEvent.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeFilter: FfiConverterRustBuffer {
    typealias SwiftType = [Filter]

    public static func write(_ value: [Filter], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeFilter.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Filter] {
        let len: Int32 = try readInt(&buf)
        var seq = [Filter]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeFilter.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringTypeActiveSubscription: FfiConverterRustBuffer {
    public static func write(_ value: [String: ActiveSubscription], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeActiveSubscription.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: ActiveSubscription] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: ActiveSubscription]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeActiveSubscription.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

fileprivate struct FfiConverterDictionaryStringTypeRelay: FfiConverterRustBuffer {
    public static func write(_ value: [String: Relay], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeRelay.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Relay] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Relay]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeRelay.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}






















public func initLogger(level: LogLevel) throws  {
    try rustCallWithError(FfiConverterTypeNostrSdkError.lift) {
    uniffi_nostr_sdk_ffi_fn_func_init_logger(
        FfiConverterTypeLogLevel.lower(level),$0)
}
}



private enum InitializationResult {
    case ok
    case contractVersionMismatch
    case apiChecksumMismatch
}
// Use a global variables to perform the versioning checks. Swift ensures that
// the code inside is only computed once.
private var initializationResult: InitializationResult {
    // Get the bindings contract version from our ComponentInterface
    let bindings_contract_version = 25
    // Get the scaffolding contract version by calling the into the dylib
    let scaffolding_contract_version = ffi_nostr_sdk_ffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version {
        return InitializationResult.contractVersionMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_func_init_logger() != 44192) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_activesubscription_filters() != 8367) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_activesubscription_id() != 99) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_add_relay() != 57027) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_connect() != 931) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_connect_relay() != 12024) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_database() != 35613) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_disconnect() != 38433) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_disconnect_relay() != 18020) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_file_metadata() != 58872) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_get_events_of() != 23606) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_handle_notifications() != 57318) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_is_running() != 15604) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_keys() != 35726) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_reconcile() != 28329) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_relay() != 41238) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_relays() != 59335) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_remove_relay() != 42775) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_req_events_of() != 46817) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_send_direct_msg() != 32469) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_send_event() != 47519) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_send_event_to() != 14429) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_send_msg() != 58092) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_send_msg_to() != 17388) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_set_metadata() != 54186) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_shutdown() != 18928) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_start() != 10767) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_stop() != 46184) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_subscribe() != 40441) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_unsubscribe() != 26478) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_client_update_difficulty() != 12432) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_build() != 20078) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_database() != 12209) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_clientbuilder_opts() != 13520) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_count() != 29275) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_by_id() != 58471) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_event_seen_on_relays() != 50082) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_profile() != 40742) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_query() != 20917) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_save_event() != 2944) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_nostrdatabase_wipe() != 31282) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_difficulty() != 36158) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_nip46_timeout() != 24058) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_req_filters_chunk_size() != 53892) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_send_timeout() != 53894) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_skip_disconnected_relays() != 19868) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_timeout() != 43772) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_connection() != 12978) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_send() != 40688) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_options_wait_for_subscription() != 1585) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_profile_metadata() != 15986) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_profile_name() != 10929) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_profile_public_key() != 64123) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_connect() != 51651) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_document() != 25236) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_get_events_of() != 43008) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_is_connected() != 21940) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_proxy() != 17424) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_queue() != 4051) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_req_events_of() != 17597) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_send_msg() != 24692) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_stats() != 51498) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_status() != 26346) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_stop() != 54326) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_subscribe() != 47803) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_subscriptions() != 677) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_terminate() != 51591) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_unsubscribe() != 29805) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relay_url() != 41822) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_attempts() != 17386) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_received() != 13245) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_bytes_sent() != 19587) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_connected_at() != 25899) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_latency() != 14031) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_success() != 3056) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_relayconnectionstats_uptime() != 18216) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_constructor_client_new() != 105) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_constructor_client_with_opts() != 56268) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_constructor_clientbuilder_new() != 10089) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_constructor_nostrdatabase_sqlite() != 12427) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_constructor_options_new() != 47978) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_constructor_profile_new() != 10444) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle_msg() != 60004) {
        return InitializationResult.apiChecksumMismatch
    }
    if (uniffi_nostr_sdk_ffi_checksum_method_handlenotification_handle() != 7650) {
        return InitializationResult.apiChecksumMismatch
    }

    uniffiCallbackInitHandleNotification()
    return InitializationResult.ok
}

private func uniffiEnsureInitialized() {
    switch initializationResult {
    case .ok:
        break
    case .contractVersionMismatch:
        fatalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    case .apiChecksumMismatch:
        fatalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}