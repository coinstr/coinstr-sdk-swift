// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(coinstr_sdkFFI)
import coinstr_sdkFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_coinstr_sdk_c407_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_coinstr_sdk_c407_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt16: FfiConverterPrimitive {
    typealias FfiType = UInt16
    typealias SwiftType = UInt16

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt16 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}

fileprivate struct FfiConverterDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> TimeInterval {
        let seconds: UInt64 = try readInt(&buf)
        let nanoseconds: UInt32 = try readInt(&buf)
        return Double(seconds) + (Double(nanoseconds) / 1.0e9)
    }

    public static func write(_ value: TimeInterval, into buf: inout [UInt8]) {
        if value.rounded(.down) > Double(Int64.max) {
            fatalError("Duration overflow, exceeds max bounds supported by Uniffi")
        }

        if value < 0 {
            fatalError("Invalid duration, must be non-negative")
        }

        let seconds = UInt64(value)
        let nanoseconds = UInt32((value - Double(seconds)) * 1.0e9)
        writeInt(&buf, seconds)
        writeInt(&buf, nanoseconds)
    }
}


public protocol BalanceProtocol {
    func `getSpendable`()  -> UInt64
    func `getTotal`()  -> UInt64
    
}

public class Balance: BalanceProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_coinstr_sdk_c407_Balance_object_free(pointer, $0) }
    }

    

    
    public func `getSpendable`()  -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Balance_get_spendable(self.pointer, $0
    )
}
        )
    }
    public func `getTotal`()  -> UInt64 {
        return try! FfiConverterUInt64.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Balance_get_total(self.pointer, $0
    )
}
        )
    }
    
}


public struct FfiConverterTypeBalance: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Balance

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Balance {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Balance, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Balance {
        return Balance(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Balance) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public protocol CoinstrProtocol {
    func `save`() throws
    func `checkPassword`(`password`: String)  -> Bool
    func `wipe`(`password`: String) throws
    func `network`()  -> Network
    func `addRelay`(`url`: String) throws
    func `connect`() 
    func `addRelaysAndConnect`(`relays`: [String]) throws
    func `removeRelay`(`url`: String) throws
    func `shutdown`() throws
    func `setElectrumEndpoint`(`endpoint`: String) 
    func `electrumEndpoint`() throws -> String
    func `blockHeight`()  -> UInt32
    func `addContact`(`publicKey`: String) throws
    func `removeContact`(`publicKey`: String) throws
    func `getPolicyById`(`policyId`: String) throws -> Policy
    func `getProposalById`(`proposalId`: String) throws -> Proposal
    func `getCompletedProposalById`(`completedProposalId`: String) throws -> CompletedProposal
    func `deletePolicyById`(`policyId`: String, `timeout`: TimeInterval?) throws
    func `deleteProposalById`(`proposalId`: String, `timeout`: TimeInterval?) throws
    func `deleteCompletedProposalById`(`completedProposalId`: String, `timeout`: TimeInterval?) throws
    func `deleteSignerById`(`signerId`: String, `timeout`: TimeInterval?) throws
    func `getPolicies`() throws -> [String: Policy]
    func `getProposals`() throws -> [String: Proposal]
    func `getCompletedProposals`() throws -> [String: CompletedProposal]
    func `spend`(`policyId`: String, `toAddress`: String, `amount`: UInt64, `description`: String, `targetBlocks`: UInt16) throws -> String
    func `spendAll`(`policyId`: String, `toAddress`: String, `description`: String, `targetBlocks`: UInt16) throws -> String
    func `approve`(`proposalId`: String) throws -> String
    func `approveWithSignedPsbt`(`proposalId`: String, `signedPsbt`: String) throws -> String
    func `finalize`(`proposalId`: String, `timeout`: TimeInterval?) throws -> CompletedProposal
    func `rebroadcastAllEvents`() throws
    func `republishSharedKeyForPolicy`(`policyId`: String) throws
    func `getBalance`(`policyId`: String) throws -> Balance?
    func `getTotalBalance`() throws -> Balance
    func `getLastUnusedAddress`(`policyId`: String) throws -> String?
    func `sync`() 
    
}

public class Coinstr: CoinstrProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_coinstr_sdk_c407_Coinstr_object_free(pointer, $0) }
    }

    
    public static func `open`(`basePath`: String, `name`: String, `password`: String, `network`: Network) throws -> Coinstr {
        return Coinstr(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeFfiError.self) {
    
    coinstr_sdk_c407_Coinstr_open(
        FfiConverterString.lower(`basePath`), 
        FfiConverterString.lower(`name`), 
        FfiConverterString.lower(`password`), 
        FfiConverterTypeNetwork.lower(`network`), $0)
})
    }
    
    public static func `generate`(`basePath`: String, `name`: String, `password`: String, `wordCount`: WordCount, `passphrase`: String?, `network`: Network) throws -> Coinstr {
        return Coinstr(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeFfiError.self) {
    
    coinstr_sdk_c407_Coinstr_generate(
        FfiConverterString.lower(`basePath`), 
        FfiConverterString.lower(`name`), 
        FfiConverterString.lower(`password`), 
        FfiConverterTypeWordCount.lower(`wordCount`), 
        FfiConverterOptionString.lower(`passphrase`), 
        FfiConverterTypeNetwork.lower(`network`), $0)
})
    }
    
    public static func `restore`(`basePath`: String, `name`: String, `password`: String, `mnemonic`: String, `passphrase`: String?, `network`: Network) throws -> Coinstr {
        return Coinstr(unsafeFromRawPointer: try
    
    rustCallWithError(FfiConverterTypeFfiError.self) {
    
    coinstr_sdk_c407_Coinstr_restore(
        FfiConverterString.lower(`basePath`), 
        FfiConverterString.lower(`name`), 
        FfiConverterString.lower(`password`), 
        FfiConverterString.lower(`mnemonic`), 
        FfiConverterOptionString.lower(`passphrase`), 
        FfiConverterTypeNetwork.lower(`network`), $0)
})
    }
    

    
    public func `save`() throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_save(self.pointer, $0
    )
}
    }
    public func `checkPassword`(`password`: String)  -> Bool {
        return try! FfiConverterBool.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Coinstr_check_password(self.pointer, 
        FfiConverterString.lower(`password`), $0
    )
}
        )
    }
    public func `wipe`(`password`: String) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_wipe(self.pointer, 
        FfiConverterString.lower(`password`), $0
    )
}
    }
    public func `network`()  -> Network {
        return try! FfiConverterTypeNetwork.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Coinstr_network(self.pointer, $0
    )
}
        )
    }
    public func `addRelay`(`url`: String) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_add_relay(self.pointer, 
        FfiConverterString.lower(`url`), $0
    )
}
    }
    public func `connect`()  {
        try!
    rustCall() {
    
    coinstr_sdk_c407_Coinstr_connect(self.pointer, $0
    )
}
    }
    public func `addRelaysAndConnect`(`relays`: [String]) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_add_relays_and_connect(self.pointer, 
        FfiConverterSequenceString.lower(`relays`), $0
    )
}
    }
    public func `removeRelay`(`url`: String) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_remove_relay(self.pointer, 
        FfiConverterString.lower(`url`), $0
    )
}
    }
    public func `shutdown`() throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_shutdown(self.pointer, $0
    )
}
    }
    public func `setElectrumEndpoint`(`endpoint`: String)  {
        try!
    rustCall() {
    
    coinstr_sdk_c407_Coinstr_set_electrum_endpoint(self.pointer, 
        FfiConverterString.lower(`endpoint`), $0
    )
}
    }
    public func `electrumEndpoint`() throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_electrum_endpoint(self.pointer, $0
    )
}
        )
    }
    public func `blockHeight`()  -> UInt32 {
        return try! FfiConverterUInt32.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Coinstr_block_height(self.pointer, $0
    )
}
        )
    }
    public func `addContact`(`publicKey`: String) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_add_contact(self.pointer, 
        FfiConverterString.lower(`publicKey`), $0
    )
}
    }
    public func `removeContact`(`publicKey`: String) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_remove_contact(self.pointer, 
        FfiConverterString.lower(`publicKey`), $0
    )
}
    }
    public func `getPolicyById`(`policyId`: String) throws -> Policy {
        return try FfiConverterTypePolicy.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_policy_by_id(self.pointer, 
        FfiConverterString.lower(`policyId`), $0
    )
}
        )
    }
    public func `getProposalById`(`proposalId`: String) throws -> Proposal {
        return try FfiConverterTypeProposal.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_proposal_by_id(self.pointer, 
        FfiConverterString.lower(`proposalId`), $0
    )
}
        )
    }
    public func `getCompletedProposalById`(`completedProposalId`: String) throws -> CompletedProposal {
        return try FfiConverterTypeCompletedProposal.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_completed_proposal_by_id(self.pointer, 
        FfiConverterString.lower(`completedProposalId`), $0
    )
}
        )
    }
    public func `deletePolicyById`(`policyId`: String, `timeout`: TimeInterval?) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_delete_policy_by_id(self.pointer, 
        FfiConverterString.lower(`policyId`), 
        FfiConverterOptionDuration.lower(`timeout`), $0
    )
}
    }
    public func `deleteProposalById`(`proposalId`: String, `timeout`: TimeInterval?) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_delete_proposal_by_id(self.pointer, 
        FfiConverterString.lower(`proposalId`), 
        FfiConverterOptionDuration.lower(`timeout`), $0
    )
}
    }
    public func `deleteCompletedProposalById`(`completedProposalId`: String, `timeout`: TimeInterval?) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_delete_completed_proposal_by_id(self.pointer, 
        FfiConverterString.lower(`completedProposalId`), 
        FfiConverterOptionDuration.lower(`timeout`), $0
    )
}
    }
    public func `deleteSignerById`(`signerId`: String, `timeout`: TimeInterval?) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_delete_signer_by_id(self.pointer, 
        FfiConverterString.lower(`signerId`), 
        FfiConverterOptionDuration.lower(`timeout`), $0
    )
}
    }
    public func `getPolicies`() throws -> [String: Policy] {
        return try FfiConverterDictionaryStringTypePolicy.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_policies(self.pointer, $0
    )
}
        )
    }
    public func `getProposals`() throws -> [String: Proposal] {
        return try FfiConverterDictionaryStringTypeProposal.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_proposals(self.pointer, $0
    )
}
        )
    }
    public func `getCompletedProposals`() throws -> [String: CompletedProposal] {
        return try FfiConverterDictionaryStringTypeCompletedProposal.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_completed_proposals(self.pointer, $0
    )
}
        )
    }
    public func `spend`(`policyId`: String, `toAddress`: String, `amount`: UInt64, `description`: String, `targetBlocks`: UInt16) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_spend(self.pointer, 
        FfiConverterString.lower(`policyId`), 
        FfiConverterString.lower(`toAddress`), 
        FfiConverterUInt64.lower(`amount`), 
        FfiConverterString.lower(`description`), 
        FfiConverterUInt16.lower(`targetBlocks`), $0
    )
}
        )
    }
    public func `spendAll`(`policyId`: String, `toAddress`: String, `description`: String, `targetBlocks`: UInt16) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_spend_all(self.pointer, 
        FfiConverterString.lower(`policyId`), 
        FfiConverterString.lower(`toAddress`), 
        FfiConverterString.lower(`description`), 
        FfiConverterUInt16.lower(`targetBlocks`), $0
    )
}
        )
    }
    public func `approve`(`proposalId`: String) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_approve(self.pointer, 
        FfiConverterString.lower(`proposalId`), $0
    )
}
        )
    }
    public func `approveWithSignedPsbt`(`proposalId`: String, `signedPsbt`: String) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_approve_with_signed_psbt(self.pointer, 
        FfiConverterString.lower(`proposalId`), 
        FfiConverterString.lower(`signedPsbt`), $0
    )
}
        )
    }
    public func `finalize`(`proposalId`: String, `timeout`: TimeInterval?) throws -> CompletedProposal {
        return try FfiConverterTypeCompletedProposal.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_finalize(self.pointer, 
        FfiConverterString.lower(`proposalId`), 
        FfiConverterOptionDuration.lower(`timeout`), $0
    )
}
        )
    }
    public func `rebroadcastAllEvents`() throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_rebroadcast_all_events(self.pointer, $0
    )
}
    }
    public func `republishSharedKeyForPolicy`(`policyId`: String) throws {
        try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_republish_shared_key_for_policy(self.pointer, 
        FfiConverterString.lower(`policyId`), $0
    )
}
    }
    public func `getBalance`(`policyId`: String) throws -> Balance? {
        return try FfiConverterOptionTypeBalance.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_balance(self.pointer, 
        FfiConverterString.lower(`policyId`), $0
    )
}
        )
    }
    public func `getTotalBalance`() throws -> Balance {
        return try FfiConverterTypeBalance.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_total_balance(self.pointer, $0
    )
}
        )
    }
    public func `getLastUnusedAddress`(`policyId`: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeFfiError.self) {
    coinstr_sdk_c407_Coinstr_get_last_unused_address(self.pointer, 
        FfiConverterString.lower(`policyId`), $0
    )
}
        )
    }
    public func `sync`()  {
        try!
    rustCall() {
    
    coinstr_sdk_c407_Coinstr_sync(self.pointer, $0
    )
}
    }
    
}


public struct FfiConverterTypeCoinstr: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Coinstr

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Coinstr {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Coinstr, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Coinstr {
        return Coinstr(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Coinstr) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public protocol PolicyProtocol {
    func `name`()  -> String
    func `description`()  -> String
    func `descriptor`()  -> String
    
}

public class Policy: PolicyProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }

    deinit {
        try! rustCall { ffi_coinstr_sdk_c407_Policy_object_free(pointer, $0) }
    }

    

    
    public func `name`()  -> String {
        return try! FfiConverterString.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Policy_name(self.pointer, $0
    )
}
        )
    }
    public func `description`()  -> String {
        return try! FfiConverterString.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Policy_description(self.pointer, $0
    )
}
        )
    }
    public func `descriptor`()  -> String {
        return try! FfiConverterString.lift(
            try!
    rustCall() {
    
    coinstr_sdk_c407_Policy_descriptor(self.pointer, $0
    )
}
        )
    }
    
}


public struct FfiConverterTypePolicy: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Policy

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Policy {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Policy, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Policy {
        return Policy(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Policy) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum CompletedProposal {
    
    case `spending`(`txid`: String, `description`: String)
    case `proofOfReserve`(`descriptor`: String, `message`: String, `psbt`: String)
}

public struct FfiConverterTypeCompletedProposal: FfiConverterRustBuffer {
    typealias SwiftType = CompletedProposal

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> CompletedProposal {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`spending`(
            `txid`: try FfiConverterString.read(from: &buf), 
            `description`: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .`proofOfReserve`(
            `descriptor`: try FfiConverterString.read(from: &buf), 
            `message`: try FfiConverterString.read(from: &buf), 
            `psbt`: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: CompletedProposal, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`spending`(`txid`,`description`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`txid`, into: &buf)
            FfiConverterString.write(`description`, into: &buf)
            
        
        case let .`proofOfReserve`(`descriptor`,`message`,`psbt`):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(`descriptor`, into: &buf)
            FfiConverterString.write(`message`, into: &buf)
            FfiConverterString.write(`psbt`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeCompletedProposal_lift(_ buf: RustBuffer) throws -> CompletedProposal {
    return try FfiConverterTypeCompletedProposal.lift(buf)
}

public func FfiConverterTypeCompletedProposal_lower(_ value: CompletedProposal) -> RustBuffer {
    return FfiConverterTypeCompletedProposal.lower(value)
}


extension CompletedProposal: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Network {
    
    case `bitcoin`
    case `testnet`
    case `signet`
    case `regtest`
}

public struct FfiConverterTypeNetwork: FfiConverterRustBuffer {
    typealias SwiftType = Network

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Network {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`bitcoin`
        
        case 2: return .`testnet`
        
        case 3: return .`signet`
        
        case 4: return .`regtest`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Network, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`bitcoin`:
            writeInt(&buf, Int32(1))
        
        
        case .`testnet`:
            writeInt(&buf, Int32(2))
        
        
        case .`signet`:
            writeInt(&buf, Int32(3))
        
        
        case .`regtest`:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeNetwork_lift(_ buf: RustBuffer) throws -> Network {
    return try FfiConverterTypeNetwork.lift(buf)
}

public func FfiConverterTypeNetwork_lower(_ value: Network) -> RustBuffer {
    return FfiConverterTypeNetwork.lower(value)
}


extension Network: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Proposal {
    
    case `spending`(`descriptor`: String, `toAddress`: String, `amount`: UInt64, `description`: String, `psbt`: String)
    case `proofOfReserve`(`descriptor`: String, `message`: String, `psbt`: String)
}

public struct FfiConverterTypeProposal: FfiConverterRustBuffer {
    typealias SwiftType = Proposal

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Proposal {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`spending`(
            `descriptor`: try FfiConverterString.read(from: &buf), 
            `toAddress`: try FfiConverterString.read(from: &buf), 
            `amount`: try FfiConverterUInt64.read(from: &buf), 
            `description`: try FfiConverterString.read(from: &buf), 
            `psbt`: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .`proofOfReserve`(
            `descriptor`: try FfiConverterString.read(from: &buf), 
            `message`: try FfiConverterString.read(from: &buf), 
            `psbt`: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Proposal, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`spending`(`descriptor`,`toAddress`,`amount`,`description`,`psbt`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`descriptor`, into: &buf)
            FfiConverterString.write(`toAddress`, into: &buf)
            FfiConverterUInt64.write(`amount`, into: &buf)
            FfiConverterString.write(`description`, into: &buf)
            FfiConverterString.write(`psbt`, into: &buf)
            
        
        case let .`proofOfReserve`(`descriptor`,`message`,`psbt`):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(`descriptor`, into: &buf)
            FfiConverterString.write(`message`, into: &buf)
            FfiConverterString.write(`psbt`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeProposal_lift(_ buf: RustBuffer) throws -> Proposal {
    return try FfiConverterTypeProposal.lift(buf)
}

public func FfiConverterTypeProposal_lower(_ value: Proposal) -> RustBuffer {
    return FfiConverterTypeProposal.lower(value)
}


extension Proposal: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum WordCount {
    
    case `w12`
    case `w18`
    case `w24`
}

public struct FfiConverterTypeWordCount: FfiConverterRustBuffer {
    typealias SwiftType = WordCount

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> WordCount {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`w12`
        
        case 2: return .`w18`
        
        case 3: return .`w24`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: WordCount, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`w12`:
            writeInt(&buf, Int32(1))
        
        
        case .`w18`:
            writeInt(&buf, Int32(2))
        
        
        case .`w24`:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeWordCount_lift(_ buf: RustBuffer) throws -> WordCount {
    return try FfiConverterTypeWordCount.lift(buf)
}

public func FfiConverterTypeWordCount_lower(_ value: WordCount) -> RustBuffer {
    return FfiConverterTypeWordCount.lower(value)
}


extension WordCount: Equatable, Hashable {}



public enum FfiError {

    
    
    case Generic(`err`: String)
}

public struct FfiConverterTypeFfiError: FfiConverterRustBuffer {
    typealias SwiftType = FfiError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FfiError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .Generic(
            `err`: try FfiConverterString.read(from: &buf)
            )

         default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FfiError, into buf: inout [UInt8]) {
        switch value {

        

        
        
        case let .Generic(`err`):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(`err`, into: &buf)
            
        }
    }
}


extension FfiError: Equatable, Hashable {}

extension FfiError: Error { }

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionDuration: FfiConverterRustBuffer {
    typealias SwiftType = TimeInterval?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterDuration.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterDuration.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeBalance: FfiConverterRustBuffer {
    typealias SwiftType = Balance?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeBalance.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeBalance.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterDictionaryStringTypePolicy: FfiConverterRustBuffer {
    public static func write(_ value: [String: Policy], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypePolicy.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Policy] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Policy]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypePolicy.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

fileprivate struct FfiConverterDictionaryStringTypeCompletedProposal: FfiConverterRustBuffer {
    public static func write(_ value: [String: CompletedProposal], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeCompletedProposal.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: CompletedProposal] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: CompletedProposal]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeCompletedProposal.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

fileprivate struct FfiConverterDictionaryStringTypeProposal: FfiConverterRustBuffer {
    public static func write(_ value: [String: Proposal], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for (key, value) in value {
            FfiConverterString.write(key, into: &buf)
            FfiConverterTypeProposal.write(value, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String: Proposal] {
        let len: Int32 = try readInt(&buf)
        var dict = [String: Proposal]()
        dict.reserveCapacity(Int(len))
        for _ in 0..<len {
            let key = try FfiConverterString.read(from: &buf)
            let value = try FfiConverterTypeProposal.read(from: &buf)
            dict[key] = value
        }
        return dict
    }
}

public func `getKeychainsList`(`basePath`: String, `network`: Network) throws -> [String] {
    return try FfiConverterSequenceString.lift(
        try
    
    rustCallWithError(FfiConverterTypeFfiError.self) {
    
    coinstr_sdk_c407_get_keychains_list(
        FfiConverterString.lower(`basePath`), 
        FfiConverterTypeNetwork.lower(`network`), $0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum CoinstrSdkLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}